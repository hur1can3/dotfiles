#!/bin/bash
#
# pbrisbin 2010
#
# utilities for managing my website. contains useful
# functions and constants. functions should check their
# input and required constants before running in case
# i eff up their usage in a script sourcing this
#
# when possible args/constants should have sane default
# values (see mk_href as an example)
#
###

# UTILITIES {{{
#

# standard logger
logger() { echo "$(date +'[ %d %b %Y %H %M ]') :: $(basename $0) :: $*" | tee -a "$log"; }

# standard errorout
errorout() { logger "ERROR: $*"; exit 1; }

# standard help
message() { echo 'you should overload this'; exit 1; }

# }}}

# relative to absolute {{{
#
# usage: rel2abs ./file  rel2abs ~/file  rel2abs file
#
###
rel2abs() {
  local file="$1" dir

  if [ ! -e "$file" ]; then
    echo "$file"
    return
  fi

  dir="$(dirname "$file")"
  file="$(basename "$file")"

  pushd "${dir:-./}" &>/dev/null || exit 1
  dir="$PWD"
  popd &>/dev/null

  echo "$dir/$file"
}

# }}}

# make href and swap {{{
#
# usage: mk_href /srv/http/pages/something.html here
#
mk_href() {
  local file="${1:-/srv/http/}"
  local link="${2:-$(basename "$file")}"
  local reverse=${reverse:-false}

  local wrappers=('<a href="' '">' '</a>')

  $reverse && file_root='' || page_root=''

  echo "${wrappers[0]}$(swap "$file")${wrappers[1]}$link${wrappers[2]}"
}

# usage: swap /srv/http/something.html  swap http://pbrisbin.com:8080/something.html
swap() { 
  local reverse=${reverse:-false}

  $reverse && echo "${*//$page_root/$file_root}" || echo "${*//$file_root/$page_root}"
}

# }}}

# list all pages in order of most recently modified {{{
#
# usage: get_pages_by_date
#
get_pages_by_date() { ls -lt "$pages"/*.html | awk '{print $NF}'; }

# }}}

# getting page info {{{
#
# these functions take a file in /srv/http/pages and
# grep for useful info like Title, Descript, Mod time
# and direct link
#
# usage: get_page_title /srv/http/pages/something.html
#
get_page_title() {
  local page="$1" title

  title="$(grep '\ *<h1>.*</h1>' "$page")"
  title="${title#*>}"
  title="${title%<*}"

  echo "$title"
}
  
# usage: get_rss_description /srv/http/pages/something.html
#
get_rss_description() {
  local page="$1"
  
  awk -F '|' '/RSS_DESC/ {print $2}' "$page"
}

# usage: get_page_link /srv/http/pages/something.html
#
get_page_link() {
  local page="$1"

  mk_href "$page"
}

# usage: get_page_date /srv/http/pages/something.html
#
get_page_date() {
  local page="$1"

  ls -l "$page" | awk '{print $6, $7, $8}'
}

# }}}

# writing page sections {{{
#
# these functions write standard page headers,
# sections, and footers
#
# usage: write_page_header /srv/http/pages/something.html 'Title'
#
write_page_header() {
  local page="$1"
  local title="$2"

  cat > "$page" << EOF
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <meta name="author" content="pbrisbin" />
  <meta name="keywords" content="pbrisbin, patrick, brisbin, 8080" />
  <meta name="description" content="pbrisbin dot com at 8080" />
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <title>Matthew Levandowsk's Homepage</title>
  <link type="text/css" rel="stylesheet" href="/generic.css" />
</head>
    
<!-- _DESC | Write one... | -->

<body>
EOF

if [ -n "$title" ]; then
  cat >> "$page" << EOF
<h1>$title</h1>
<hr />

EOF

fi
}

# usage: write_page_section /srv/http/pages/something.html /srv/http/pages/content.html
#
build_page_section() {
  local src_page="$1"
  local dst_page="$2"

  local title="$(get_page_title "$src_page")"
  local descr="$(get_rss_description "$src_page")"
  local hlink="$(get_page_link "$src_page")"
  local mdate="$(get_page_date "$src_page")"

  # need all values to proceed
  [ -z "$title" ] && return
  [ -z "$descr" ] && return
  [ -z "$hlink" ] && return
  [ -z "$mdate" ] && return

  cat >> "$dst_page" << EOF

<h2>$title</h2>
<p>Description: $descr</p>
<p>Last modified: $mdate</p>
<p>Link: $hlink</p>

EOF
}

# usage: write_page_footer /srv/http/pages/something.html true
#
write_page_footer() {
  local page="$1"
  local generated=${2:-false}

  # if script was auto generated
  if $generated; then
    cat >> "$page" << EOF

<p align="center">.: page auto-generated by $(mk_href "$srv/bin/$(basename "$0")" 'this') :.</p>

EOF
fi

  # standard footer
  cat >> "$page" << EOF

<hr />
<p align="center"><a href="/">pbrisbin</a> dot com at 8080 - $(date +%Y)</p>
</body>
</html>
EOF
}

# }}}

# write a template page {{{
#
# usage: write_page_template /srv/http/pages/something.html
#
write_page_template() {
  local page="$1"

  write_page_header "$page" 'Title'
  write_page_footer "$page"
}

# }}}

# write an i-frame page {{{
#
# usage: write_iframe_page /srv/http/pages/dots.html 'Dotfiles' /srv/http/dotfiles
#
write_iframe_page() {
  local page="$1"
  local title="$2"
  local src="${3/$file_root/}"

  [ -z "$page" ] && errorout 'page not set'
  [ -z "$src" ] && errrout 'source not set'

  write_page_header "$page" "$title"

  cat >> "$page" << EOF
  <center>
    <iframe src="$src" width="100%" style="height: 500px; ">
      <p>Not supporting iframes?</p>
    </iframe>
  </center>

  <p> 
  If your browser doesn't load the above iframe, the direct link is $(mk_href "$srv$src" "$site$src")</a>.
  </p>

EOF

  write_page_footer "$page" true
}

# }}}

# image manipulation {{{
#
# these functions do a conditional resize based on
# image width
# 
# do_resize also echos the var $thum if needed
#
# these should only be called from do_resize()
#
make_half() {
  local file="$1"

  thum="${file/.png/-half.png}"

  [ -e "$thum" ] && return

  cp "$file" "$thum"
  mogrify -resize 50% "$thum"

  # since we might be root, fix perms
  chown patrick:patrick "$thum"
}

make_third() {
  local file="$1"

  thum="${file/.png/-third.png}"

  [ -e "$thum" ] && return

  cp "$file" "$thum"
  mogrify -resize 30% "$thum"

  # since we might be root, fix perms
  chown patrick:patrick "$thum"
}

make_thumb() {
  local file="$1"

  thum="${file/.png/-thumb.png}"

  [ -e "$thum" ] && return

  cp "$file" "$thum"
  mogrify -resize 20% "$thum"

  # since we might be root, fix perms
  chown hur1can3:hur1can3 "$thum"
}

# do a conditional resize of $1
# return basename of resized image
#
# usage: do_resize /path/to/image
#
do_resize() {
  local file="$1"
  local width=$(feh -l "$file" | tail -1 | awk '{print $3}')

  # makes thumb and sets var $thum
  case $width in
    3600) make_third "$file" ;;
    1920) make_half "$file"  ;;
    *)    make_thumb "$file" ;;
  esac

  echo $(basename "$thum")
}

# }}}
 
# desktop shots {{{
#
# these functions take find screenshots and
# a folder of pages, one per shot
#
# requires four vars be set
#
# usage: build_sshot_page
#
build_sshot_page() {
  [ -z "$this_page" ] && errorout 'this page not set'
  [ -z "$prev_page" ] && errorout 'prev page not set'
  [ -z "$next_page" ] && errorout 'next page not set'

  [ -z "$shot" ] && errorout 'shot not set'
  [ -z "$thum" ] && errorout 'thum not set'
  
  # write the header
  write_page_header "$this_page" 'Desktop Shots'

  # write the image portion
  cat >> "$this_page" << EOF
<h2>$shot</h2>

<p><a href="$prev_page">PREV</a></p>

<p class="centered"><a href="/screenshots/$shot"><img src="/screenshots/$thum" id="screenshot" alt="Desktop Screenshot" /></a></p>

<p class="right"><a href="$next_page">NEXT</a></p>

EOF

  # write the footer
  write_page_footer "$this_page" true
}

# builds an array of desktop shots
# 
# usage: build_sshots_array
#
build_sshots_array() {
  [ -z "$shots_dir" ] && errorout 'shots dir not set'

  local LC_ALL='C' shot

  shots=()

  for shot in $(find "$shots_dir" -regex '.*desktop_[0-9]*.png' -print | sort -r); do
    shots+=( "$(basename "$shot")" )
  done
}

#
# usage: mk_sshots_pages
#
mk_sshots_pages() {
  [ -z "$shots_pages" ] && errorout 'shots pages not set'

  build_sshots_array

  local i

  [ ! -d "$shots_pages" ] && mkdir -p "$shots_pages"
  find "$shots_pages" -type f -name '*.html' -delete

  for ((i=0; i<${#shots[@]}; i++)); do
    c=$((i+1))

    # set shot and thum
    shot="${shots[i]}"
    thum="$(do_resize "$shots_dir/$shot")"

    # this page is a real file path
    this_page="/$shots_pages/$c.html"

    # next/prev page links are relative
    prev_page="/desktops/$((c-1)).html"
    next_page="/desktops/$((c+1)).html"

    # incase we're first or last
    [ $c -eq 1 ] && prev_page='/'
    [ $c -eq ${#shots[@]} ] && next_page='/'

    build_sshot_page
  done
}

# }}}

# rss {{{
#
# create an rss <item> block for any given page
#
# usage: write_rss_item /srv/http/pages/something.html /srv/http/pages/rssfeed.rss
#
write_rss_item() {
  local src_page="$1"
  local dst_page="$2"
  local feed="$3" # don't ask

  local title="$(get_page_title "$src_page")"
  local descr="$(get_rss_description "$src_page")"
  local hlink="$(file2link "$src_page")"

  # check
  [ -e "$dst_page" ] || return
  [ -e "$src_page" ] || return

  [ -z "$title" ] && return
  [ -z "$descr" ] && return
  [ -z "$hlink" ] && return

  # check dupes
  grep -Fq "$hlink" "$feed" && return

  logger "adding new item $title: $descr..."

  cat >> "$dst_page" << EOF
<item>
<title>$title</title>
<link>$hlink</link>
<guid>$hlink</guid>
<pubDate>$(date -R)</pubDate>
<description>$descr</description>
</item>

EOF
}

# }}}

# set or check and md5 of a file {{{
#
# usage: check_md5 set /path/to/file  check_md5 get /path/to/file
#
check_md5() {
  local mode="$1"
  local _md5="$(md5sum "$2" | awk '{print $1}')"

  case "$mode" in
    set) md5="$_md5"                               ;;  
    get) [ "$md5" = "$_md5" ]                      ;;  
    *)   errorout 'invalid options to check_md5()' ;;
  esac
}

# }}}

# show available functions {{{
show_available() { grep '^# usage:' "$me"; }

# }}}

# constants {{{
me='/home/hur1can3/.bin/siteutils'

# all site management can log here or
# override this on a per script basis
log='/home/hur1can3/.logs/siteutils.log'

# sometimes we're root; we have to keep the log
# writable by me for the time's we're not
[ $(id -u) -eq 0 ] && chown hur1can3:hur1can3 "$log"

# file and page paths
srv='/srv/http'
site='http://www2.gvsu.edu/~levandma'

# used in swap()
page_root="$site"
file_root="$srv"

# holds all *.html pages
pages="$srv/pages"

# screenshot related constants
shots_dir='/home/hur1can3/Images/screenshots'
shots_link="$site/screenshots"
shots_pages="$srv/desktops"

# }}}
