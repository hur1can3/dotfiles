#!/bin/bash
# sourced by .bashrc

# Colorize less output
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'


### linux console colors (jwr dark) ###
if [ "$TERM" = "linux" ]; then
    echo -en "\e]P0000000" #black
    echo -en "\e]P85e5e5e" #darkgrey
    echo -en "\e]P18a2f58" #darkred
    echo -en "\e]P9cf4f88" #red
    echo -en "\e]P2287373" #darkgreen
    echo -en "\e]PA53a6a6" #green
    echo -en "\e]P3914e89" #darkyellow
    echo -en "\e]PBbf85cc" #yellow
    echo -en "\e]P4395573" #darkblue
    echo -en "\e]PC4779b3" #blue
    echo -en "\e]P55e468c" #darkmagenta
    echo -en "\e]PD7f62b3" #magenta
    echo -en "\e]P62b7694" #darkcyan
    echo -en "\e]PE47959e" #cyan
    echo -en "\e]P7899ca1" #lightgrey
    echo -en "\e]PFc0c0c0" #white
    clear # bring us back to default input colours
fi

# molokai console colors -------------------------------------
# if [ "$TERM" = "linux" ]; then
#      echo -en "\e]P0000000" #black
#      echo -en "\e]P8505354" #darkgrey
#      echo -en "\e]P1f92672" #darkred
#      echo -en "\e]P9ff5995" #red
#      echo -en "\e]P282b414" #darkgreen
#      echo -en "\e]PAb6e354" #green
#      echo -en "\e]P3fd971f" #brown
#      echo -en "\e]PBfeed6c" #yellow
#      echo -en "\e]P456c2d6" #darkblue
#      echo -en "\e]PC8cedff" #blue
#      echo -en "\e]P58c54fe" #darkmagenta
#      echo -en "\e]PD9e6ffe" #magenta
#      echo -en "\e]P6465457" #darkcyan
#      echo -en "\e]PE899ca1" #cyan
#      echo -en "\e]P7ccccc6" #lightgrey
#      echo -en "\e]PFf8f8f2" #white
#      clear # back to default input colours
# fi

function is_submodule() {
    local git_dir parent_git module_name path strip
    # Find the root of this git repo, then check if its parent dir is also a repo
    git_dir="$(git rev-parse --show-toplevel)"
    parent_git="$(cd "$git_dir/.." && git rev-parse --show-toplevel 2> /dev/null)"

    if [[ -n $parent_git ]]; then
        strip=$((${#parent_git} + 1))
        module_name=${git_dir:$strip}
        # List all the submodule paths for the parent repo
        while read path
        do
            if [[ "$path" != "$module_name" ]]; then continue; fi
            if [[ -d "$parent_git/$path" ]]; then
                echo $module_name
                return 0;
            fi
        done < <(cd $parent_git && git submodule --quiet foreach 'echo $path' 2> /dev/null)
    fi
    return 1
}

function parse_git_branch {
    git show > /dev/null 2>&1 || return
    P=

    SM=
    submodule=$(is_submodule)
    if [[ $? -eq 0 ]]; then
        SM="s:$submodule"
    fi
    P=$P${SM:+${P:+ }${SM}}

    BRANCH=
    ref=$(git symbolic-ref HEAD 2> /dev/null)
    if [[ $? -eq 0 ]]; then
      BRANCH="b:${ref#refs/heads/}"
    fi
    P=$P${BRANCH:+${P:+ }${BRANCH}}


    DESC="d:"$(git describe 2> /dev/null) || DESC=""
    P=$P${DESC:+${P:+ }${DESC}}

    echo "(${P}) "
}

# add to prompt by adding to .bashrc somewhere:
# PS1="\$(parse_git_branch)$PS1"


# make a really cool linux prompt
set_prompt_style () {
  #local USER_COLOR="\[\033[1;34m\]"   #Light Blue
  #local DIR_COLOR="\[\033[1:36m\]"     #Light Grey
  #local RESET_COLOR="\[\033[1;37m\]" #White
  local SYMBOL="$"

  if [ `whoami` == "root" ] ; then
    USER_COLOR="\[\033[0;31m\]"       #Light Red
    DIR_COLOR=$USER_COLOR
    SYMBOL="#"
  fi
 
  if [ -n "$SSH_CLIENT" ]; then
    PS1="┌─[\[\e[0;34m\]\h\[\e[0m\] \[\e[1;33m\]\w:\[\e[0m\] \[\e[1;31m\]SSH\[\e[0m\]]\$(parse_git_branch)\n└─╼ "
  elif [ `whoami` == "root" ] ; then
    S1="┌─[\[\e[34m\u\e[36m\]@\h\[\e[0m\]][\[\e[1;32m\]\w\[\e[0m\]]\$(parse_git_branch)\n└─╼ "
  else    
    # default user prompt
    PS1="┌─[\[\e[34m\u\e[36m\]@\h\[\e[0m\]][\[\e[1;32m\]\w\[\e[0m\]]\$(parse_git_branch)\n└─╼ "
    #PS1="┌─[\[\e[34m\]\h\[\e[0m\] \[\e[32m\]\w\[\e[0m\]]\n└─╼ "
  fi

}
set_prompt_style

# colour coreutils
eval $(dircolors -b ~/.dir_colors)
#eval `dircolors -b ~/.dir_colors`

# colourize terminal output w/ cope
#export PATH=/usr/local/share/perl/5.12.4/auto/share/dist/Cope:$PATH


